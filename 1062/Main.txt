import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.StringTokenizer;

public class Main {
    static int N, K;
    static String [] words;

    static char [] essential = {'a', 'n', 't', 'i', 'c'};

    static int MAX = 0;
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());
        N = Integer.parseInt(st.nextToken());
        K = Integer.parseInt(st.nextToken());

        if (K == 0) {
            System.out.println(0);
            System.exit(0);
        }

        words = new String[N];
        int [] letters = new int[26];

        // words 초기화
        for (int i = 0 ; i < N ; i++) {
            String word = br.readLine();
            words[i] = word;
            buildLetterArr(word, letters);
        }

        ArrayList<Character> arr = new ArrayList<>();

        for (int i = 0 ; i < letters.length ; i++) {
            if (letters[i] == 1) arr.add((char)(i + 'a'));
        }

        char [] additionalChars = new char[arr.size()];
        for (int i = 0 ; i < arr.size() ; i++) {
            additionalChars[i] = arr.get(i);
        }
        /*
        System.out.println("additional chars");
        for (char c : additionalChars) {
            System.out.print(c + " ");
        }
        System.out.println();
        */
        if ( K <= 5) {
            System.out.println(0);
        } else {
            int additionalLetter = K - 5;
            aboveFive(new boolean[arr.size()], additionalChars, new char[additionalLetter], 0, 0);
        }
    }

    static void buildLetterArr(String line, int [] letters) {
        char [] arr = line.toCharArray();
        for (char c : arr) {
            if (c == 'a' || c == 'n' || c == 't' || c == 'i'|| c == 'c') continue;
            letters[c - 'a'] = 1;
        }
    }

    static void aboveFive(boolean [] visited, char [] letters, char [] chosen, int start, int depth) {
        if (depth == chosen.length) {
            for (char c : chosen)
                System.out.print(c + " ");
            System.out.println();
            return;
        }

        for (int i = start ; i < letters.length ; i++) {
            if (!visited[i]) {
                visited[i] = true;
                chosen[depth] = letters[i];
                aboveFive(visited, letters, chosen, i + 1, depth + 1);
                visited[i] = false;
            }
        }

    }

    static void belowFive(boolean [] visited, char [] letters, char [] chosen, int start, int depth) {
        if (depth == chosen.length) {
            for (char c : chosen)
                System.out.print(c + " ");
            System.out.println();
            return;
        }

        for (int i = start ; i < letters.length ; i++) {
            if (!visited[i]) {
                visited[i] = true;
                chosen[depth] = letters[i];
                belowFive(visited, letters, chosen, i + 1, depth + 1);
                visited[i] = false;
            }
        }
    }




}